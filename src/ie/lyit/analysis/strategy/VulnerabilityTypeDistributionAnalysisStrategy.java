package ie.lyit.analysis.strategy;

import https.www_owasp_org.index_php.owasp_dependency_check.Analysis;
import https.www_owasp_org.index_php.owasp_dependency_check.Analysis.Dependencies.Dependency.Vulnerabilities.Vulnerability;
import ie.lyit.analysis.factory.Factory;
import ie.lyit.analysis.factory.VulnerabilityTypeListFactory;
import ie.lyit.analysis.strategy.utility.AnalysisUtil;
import ie.lyit.domain.AnalysisResult;
import ie.lyit.domain.VulnerabilityType;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class VulnerabilityTypeDistributionAnalysisStrategy extends AbstractAnalysisResultStrategy {

	private List<VulnerabilityType> vulnerabilityTypeList;

	private Factory<List<VulnerabilityType>> vulnerabilityTypeListFactory = new VulnerabilityTypeListFactory();

	private void checkVulnerabilityDescriptionForIdentifiers(String description, VulnerabilityType vulnerabilityType) {
		List<String> identifiers = vulnerabilityType.getIdentifiers();

		for (String identifier : identifiers) {
			if (description.toLowerCase().contains(identifier.toLowerCase())) {

				AnalysisResult ar = getAnalysisResult();

				ar.increment(vulnerabilityType.getName());

				// Break; because I only want to count the
				// Appearance once per vulnerability.
				break;
			}
		}
	}

	@Override
	protected void initialise() {

		AnalysisResult ar = getAnalysisResult();

		ar.setNameOfAnalysis("Vulnerability Type Distribution");
		ar.setTypeOfItemOfInterest("Vulnerability Type");

		vulnerabilityTypeList = vulnerabilityTypeListFactory.create();
	}

	@Override
	protected void runSpecificAnalysis(Analysis analysis) {

		// TODO: alot of this nested conditional logic could probably be
		// refactored

		// TODO: also need to be aware of a potential performance hit - but this
		// might be acceptable for these types of one-off analysis

		Map<String, Vulnerability> uniqueVulnerabilites = AnalysisUtil.extractUniqueVulnerabilities(analysis);

		// System.out.println(uniqueVulnerabilites);

		Iterator<Entry<String, Vulnerability>> it = uniqueVulnerabilites.entrySet().iterator();

		while (it.hasNext()) {
			Map.Entry pairs = it.next();

			Vulnerability vulnerability = (Vulnerability) pairs.getValue();

			String description = vulnerability.getDescription();

			for (VulnerabilityType vulnerabilityType : vulnerabilityTypeList) {
				checkVulnerabilityDescriptionForIdentifiers(description, vulnerabilityType);
			}

			it.remove();
		}
	}
}