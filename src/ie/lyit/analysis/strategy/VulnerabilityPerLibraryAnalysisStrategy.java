package ie.lyit.analysis.strategy;

import https.www_owasp_org.index_php.owasp_dependency_check.Analysis;
import ie.lyit.analysis.strategy.utility.AnalysisUtil;
import ie.lyit.domain.AnalysisResult;

/**
 * The Class VulnerabilityPerLibraryAnalysisStrategy.
 */
public class VulnerabilityPerLibraryAnalysisStrategy extends AbstractAnalysisStrategy {

	/* (non-Javadoc)
	 * @see ie.lyit.analysis.strategy.AbstractAnalysisStrategy#initialise()
	 */
	@Override
	protected void initialise() {
		AnalysisResult ar = getAnalysisResult();

		ar.setNameOfAnalysis("Number of vulnerabilities per library");
		ar.setTypeOfItemOfInterest("Project name");

	}

	// TODO: There's a bug in here somewhere...possibly in a divide by zero?
	// operation?
	/* (non-Javadoc)
	 * @see ie.lyit.analysis.strategy.AbstractAnalysisStrategy#runSpecificAnalysis(https.www_owasp_org.index_php.owasp_dependency_check.Analysis)
	 */
	@Override
	protected void runSpecificAnalysis(Analysis analysis) {
		AnalysisResult ar = getAnalysisResult();

		double vulnerabilities = AnalysisUtil.getTotalUniqueVulnerabilities(analysis);
		double dependencies = AnalysisUtil.getTotalDependencies(analysis);

		// TODO: restructure this logic so it's slightly less clunky, for
		// want of a better word

		if (dependencies == 0) {
			ar.add(analysis.getProjectInfo().getName(), (double) 0);
			return;
		}

		double result = vulnerabilities / dependencies;

		ar.add(analysis.getProjectInfo().getName(), result);
	}
}
