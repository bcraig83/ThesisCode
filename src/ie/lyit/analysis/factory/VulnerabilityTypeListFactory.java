package ie.lyit.analysis.factory;

import ie.lyit.domain.VulnerabilityType;

import java.util.ArrayList;
import java.util.List;

/**
 * A factory for creating VulnerabilityTypeList objects.
 */
public class VulnerabilityTypeListFactory implements Factory<List<VulnerabilityType>> {

	private List<VulnerabilityType> vulnerabilityTypeList = new ArrayList<VulnerabilityType>();

	// Hard-coded instantiation methods. These could obviously be moved out into
	// configuration files (such as Spring, ini or even properties files)

	/**
	 * Adds the access control vulnerability.
	 */
	private void addAccessControlVulnerability() {
		VulnerabilityType vulnerabilityType = new VulnerabilityType("Access Control");

		vulnerabilityType.addIdentifier("bypass access control");
		vulnerabilityType.addIdentifier("allows local users to modify arbitrary files");
		vulnerabilityType.addIdentifier("allows remote authenticated users to modify");
		vulnerabilityType.addIdentifier("does not prevent access");

		vulnerabilityTypeList.add(vulnerabilityType);
	}

	/**
	 * Adds the broken authentication and session mangement vulnerability.
	 */
	private void addBrokenAuthenticationAndSessionMangementVulnerability() {
		VulnerabilityType vulnerabilityType = new VulnerabilityType("Broken Authentication and Session Management");
		vulnerabilityType.addIdentifier("allows remote attackers to execute");
		vulnerabilityType.addIdentifier("Access Authentication");
		vulnerabilityType.addIdentifier("broken authentication");
		vulnerabilityType.addIdentifier("broken session");
		vulnerabilityType.addIdentifier("do not properly restrict access to collections such as the session");
		vulnerabilityTypeList.add(vulnerabilityType);

	}

	/**
	 * Adds the csrf vulnerability.
	 */
	private void addCSRFVulnerability() {
		VulnerabilityType vulnerabilityType = new VulnerabilityType("Cross-Site Request Forgery");

		vulnerabilityType.addIdentifier("CSRF");
		vulnerabilityType.addIdentifier("XSRF");
		vulnerabilityType.addIdentifier("Cross-site request forgery");
		vulnerabilityType.addIdentifier("Cross site request forgery");

		vulnerabilityTypeList.add(vulnerabilityType);
	}

	/**
	 * Adds the css vulnerability.
	 */
	private void addCSSVulnerability() {
		VulnerabilityType vulnerabilityType = new VulnerabilityType("Cross-Site Scripting");

		vulnerabilityType.addIdentifier("CSS");
		vulnerabilityType.addIdentifier("XSS");
		vulnerabilityType.addIdentifier("Cross Site Scripting");
		vulnerabilityType.addIdentifier("Cross-Site-Scripting");

		vulnerabilityTypeList.add(vulnerabilityType);
	}

	/**
	 * Adds the dos vulnerability.
	 */
	private void addDOSVulnerability() {
		VulnerabilityType vulnerabilityType = new VulnerabilityType("Denial of Service");

		// This list may grow as I learn more about how the dependency check
		// tool identifies various type of vulnerabilities
		vulnerabilityType.addIdentifier("DOS");
		vulnerabilityType.addIdentifier("denial of service");
		vulnerabilityType.addIdentifier("denial-of-service");
		vulnerabilityType.addIdentifier("D.O.S");

		vulnerabilityTypeList.add(vulnerabilityType);
	}

	/**
	 * Adds the injection vulnerability.
	 */
	private void addInjectionVulnerability() {
		VulnerabilityType vulnerabilityType = new VulnerabilityType("SQL Injection");

		vulnerabilityType.addIdentifier("Injection");

		vulnerabilityTypeList.add(vulnerabilityType);
	}

	/**
	 * Adds the unspecified vulnerability.
	 */
	private void addUnspecifiedVulnerability() {
		VulnerabilityType vulnerabilityType = new VulnerabilityType("Unspecified");

		vulnerabilityType.addIdentifier("Unspecified vulnerability");
		vulnerabilityTypeList.add(vulnerabilityType);
	}

	/* (non-Javadoc)
	 * @see ie.lyit.analysis.factory.Factory#create()
	 */
	public List<VulnerabilityType> create() {
		initialise();
		return vulnerabilityTypeList;
	}

	/**
	 * Initialise.
	 */
	private void initialise() {
		addAccessControlVulnerability();
		addCSRFVulnerability();
		addInjectionVulnerability();
		addBrokenAuthenticationAndSessionMangementVulnerability();
		addDOSVulnerability();
		addCSSVulnerability();
		addUnspecifiedVulnerability();
	}
}
